const tokenABI = require("../abi/contracts/TestToken.sol/TestToken.json")
const hre = require("hardhat")

// small sample script for using deploys and then deploying a trace
async function main() {
    // deploy all contracts using hardhat deploy
    const { deployments, ethers } = hre
    const accounts = await ethers.getSigners()

    // deploy from a given token
    const tokenAddress = "0xd9d378184228fb88361c4a375448913c386b9860"

    let tokenInstance = new ethers.Contract(tokenAddress, tokenABI)

    // receivers of tokens
    const receivers = [
        "0x2804F1308e0423d893f181F4e63B6Fa2A6e9Cf1e",
        "0x0029ab135b5be72168bf80f140d60a9264dbd0c5",
        "0xB7518905149eb3dBDb22d022Afc071E633D06aa1",
        "0xF3bd1EB50951B9ef78D4e35d75601AD8ba7Da59e",
        "0x5eeA91e130Df8767c847d36e7139dC5Dd648bd43",
        "0x50689E276FEBC646E13476ACE96e1FB287B1c2e9",
        "0x628a5245E8E824f6Acf49006eD034C2094010245",
        "0xe5adF94c39f3c96732EF66b1B94D1e5C99cDe805",
        "0xfdbF424146e39e5F420E116903Af75F23328C8b1",
        "0x01974549C9B9a30d47c548A16b120b1cAa7B586C",
        "0x79Df0010aE0434534e75321beA2B858036C661bB",
        "0xE943398DA56744435f094bc1478C203fB0045e20",
        "0x2a9b9dB94AEAECAC20787856B33cB3129777F053",
        "0x76ACcFfd0a86c0c9d547A1Fd79cc9F270429E15D",
        "0x727d5c62CF2bD163603e5210bCDF5f556cb16df0",
        "0xbce50232dc5DD9de266c76aCE00fe2B43D6dF431",
        "0x788ca7F1d7f9DEeA0a09Ca0157da1F8E54036066",
        "0x56899f9c75dDD8611f27FEB3168F37278ef4B496",
        "0x46B8FfC41F26cd896E033942cAF999b78d10c277",
        "0xCA4140cA2c4e457DB32c8c54b061D1C36b2Df3E1",
        "0xBEe3752A1E1d837C92EF1F794AD21121eB1D82C4",
        "0x93842D58FdF43D1BB64685eD4C7BA7766AC2B6d5",
        "0xF817554Cc4Ca4Fe435dbF43BD1bACF0d7B0f38d7",
        "0xd7988b659063352A3867979f8F35181A5835b439",
        "0xd84E11beE5D555CCd905817Cb8CBBd5b6e6C4f0D",
        "0x29c4B9D93473Ce3631eB7815B00419B0146db18f",
        "0x7cb3B0598624204c73317fDaef64DAa2A2CAda23",
        "0x42e792cF54BDF57bBF0592C3F02d2b3F3b27d8C2",
        "0x1A8a67603eacb511b6AAd692061Bb8184Bf0C5d1",
        "0x322D19EB471f8e6380D200AaaE9632593Cfd1B80",
        "0x83fC330807dfB3C2FDD3Fc9eCB8529b1d8509A94",
        "0x61a1fE521232eD09433616136D6CCC24CA01d6C5",
        "0x0F280fdC1f719528a67d5353dC438F73CA814F4c",
        "0x79eb92Be992b88e80aB2d9E96fB0cF0FecD84Fa4",
        "0xbCCf9f2B76c7E2460d0aCB9763ae8B779675e568",
        "0x722E895A12D2A11BE99ED69DBC1FEDBB9F3CD8FE",
        "0xFd42AD1fF493EEb0cF9A6D58F02642fb76755849",
        "0x00c030D1A4AE0C144021ca4E30705d8075aA827A",
        "0x2F4eC21984ce14f7Da1cB0cA37d11dd477D75995",
        "0x560C8110B2c2f85261C0F761E329235194dAa6b9",
        "0x4f66f66B916142c055DA9cCA02036aba430a8DCe",
        "0xdE0F7b7959D6A2733175Bd67CAD991DbD0a1Df07",
        "0x0877570a694B00D11f6c16c95DDbE2D50d4a7707",
        "0x5DbB9aC850B1DA38c332b68e2045186F1339CaF4",
        "0x10959926fb4926D181a2ea46CeB234150Ab70C9B",
        "0xeFAE1190444Aae8CFF4915eb7D5054BFcDfEDcE6",
        "0xCf81C184061e2Cc15bC504EE2d3475A62BEb8FD9",
        "0x583ca5DBcDB58b1Bc3b107c6c6a87FBE933d461d",
        "0x6Cd68E8f04490Cd1A5A21cc97CC8BC15b47Dc9eb",
        "0xAe2690b62A99F595B3C78e4d60a4E87A0f277333",
        "0xb9D2acF2c5db82348a5Ef0008287a2fe60D1B0f0",
        "0xE3347F8E662583d6EEeE6C3117a7ddDacE070984",
        "0xA76F9Db8546A9bd4c02FAa8dBfd12910008f04Ff",
        "0x27412e76f372bd30400D6883B010C50909d5258d",
        "0x6CF51FDeF74d02296017A1129086Ee9C3477DC01",
        "0xaB5f2b1328C0F8C6c306D54EC31A029d2D5D60E4",
        "0xaB57ad01EF6C420089C2BaC26F204A28406F73e0",
        "0x7867c5f717a833f9c29790b3424e69f8c1d164fa",
        "0x09212c58107C8DA21B0F67a63e2144bB68bee4eb",
        "0xe085327c5AD2F77147F10973Fed45Fb19d734F7e",
        "0x1f2a94B02d8303614ba629854180125e4b4fE1D8",
        "0x35B0FC0cA3e2378BB52aaC56A2178E59e617f6ef",
        "0xd4E9464660Eb9c5F18A44E3D9DbA9403Da3f3A6b",
        "0x3A8C0181845c2c183FFe1BD92a0c676d1b523596",
        "0x9b183E10FaB65823749381cAAeAd6EcCFE63c348",
        "0xAf2A34A7F3cbe9473c6bD016B8198B3A0345E9Cd",
        "0x8Ff997b9463401d84a4Bbfa2d1e4a1a4C34a046F",
        "0xb5041a23d31fE96b160C829C41Ef41a7944262E6",
        "0x18F1DF93AA25d034f06f539d0fE3b23c6a5B049c",
        "0x0242b6cc997fC1c438D01421bef7839932d9De26",
        "0xf50242724bc4f4d9abBa9660C0e64dB9c4e3ec7c",
        "0xd31C4835c58D28Ec57d51E303b146F89324a3B57",
        "0x59eBB0c68eA105Dc1feCd5A37a64e8B435757A1c",
        "0xF35D426C97DbA704B44d77ADa1463DFdA373269A",
        "0xAC12f4A822091F8Eda66AFC71B2F0eDc45bC3266",
        "0x8f51a2a3138921f0d5d6fa6f5ad86e5880869674",
        "0x9A8D375D20f54e7e0500e13Bcb0B9a1cF36Ff62D",
        "0xbaF3c5958F0c073fEb9312816Edca59FE070A2d7",
        "0xCa6a7Ee70Bc1a817751601d6BA7caEcEA748342B",
        "0x27aea25f12f766103d2eE71143349952E480aB0F",
        "0xe84D3290E7026849365107a0AF0746055E3f9603",
        "0x3d1C6674d5506282fdfC8c42f3D0174d01C964Ee",
        "0x854058553dF87EF1bE2c1D8f24eEa8AF52A81fF1",
        "0x0c2EA600d8bECE889F998D6a22332298E879940b",
        "0x565f6f12688332F43C35706aC77aeed36F1Ef5E3",
        "0x7046fD611be89023E20F4f8711c38Cb31692c7F3",
        "0x1668c9725e27Bf5943bBD43886E1Fb5AFe75c46C",
        "0x63ff66B94B87A724Bc6D2772Ad9b1538bB1aB238",
        "0x44C51816D2B75CbD5cf63B2c8107E6f8D9a39529",
        "0x372e68e5F7848fEab4d846a4F5eEDaAa9d99Ff74",
        "0x0e1C46258A646Cb045164606B88aE0Aa965DA67D",
        "0x217917e355855FdF1Bb22C52B6fdb7D89133aEEc",
        "0x6e3674ab23fea3968e0e859Ff89c2667c9C4cC74",
        "0x638321992570dFFf36482C5040bAdE38767e5A1B",
        "0xd1f0494CF8ee37fA8B826d8a1f3D47c28B9EDB73",
        "0x96126905354188D54fDE07af311747e83FCb3a50",
        "0x5bbBB4a44C709aa4b53efaC6CaA14Ad5cECE2014",
        "0x142Ae08b246845cec2386b5eACb2D3e98a1E04E3",
        "0xfb59B91646cd0890F3E5343384FEb746989B66C7",
        "0x23fDEcc1b7D71c51a30fCE442Fe2C8F6BfE8c179",
        "0xa530e31995eA13dB8F7bbC27ccA07Cb701e1a77d",
        "0xcd234Fbab4173F7e63A813D2aAfAF5B2AE12DEAd",
        "0x30c648196541159bdd77Dd35E0b203bC4B6e7822",
        "0x6FfA4693Fed2A564081f05de211f212bfFd7EE74",
        "0xc9530b1640cC254d3c0337b532F8A9b14e44344C",
        "0xf62b5220001c0e491dc7eBd5CA72b161e59ECa65",
        "0x0f9aa60c9194DFb91A34A69B8B3C2D545e8e8645",
        "0x9B7A417Cde9D1e116958E4aaEF6c09928E0fe5BD",
        "0xA83fde98C89c74b6B92Ce24e2Fc6b914B88d0d1C",
        "0x7656901eFcD6e179e7e13Ae93cFB8373689f4160",
        "0x759fFC37876fEa188660e881baA6333AAC024F00",
        "0x8CDbEBeeE5B70749be0FAD211CaDA13BD07C9f9F",
        "0x61F5a3D36c10D7ea1d797e70f7486EB7ad177481",
        "0x5aef242Ec5d13B4C0dc255C09522B95178cC6467",
        "0x62e2301441a117aeF332CAcb8dE280DF7eed14b7",
    ]

    console.log(tokenInstance.address)
    const amount = "500000000000"
    for (var i = 0; i < receivers.length; i++) {
        let receiver = receivers[i]
        await tokenInstance.connect(accounts[0]).transfer(receiver, amount)
        console.log(`${amount} tokens sent to ${receiver}`)
    }
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error)
        process.exit(1)
    })
